console.c:      if(proc->killed){
exec.c:  safestrcpy(proc->name, last, sizeof(proc->name));
exec.c:  oldpgdir = proc->pgdir;
exec.c:  proc->pgdir = pgdir;
exec.c:  proc->sz = sz;
exec.c:  proc->tf->eip = elf.entry;  // main
exec.c:  proc->tf->esp = sp;
fs.c:    ip = idup(proc->cwd);
kernel.asm:      if(proc->killed){
kernel.asm:  safestrcpy(proc->name, last, sizeof(proc->name));
kernel.asm:  oldpgdir = proc->pgdir;
kernel.asm:  proc->pgdir = pgdir;
kernel.asm:  proc->sz = sz;
kernel.asm:  proc->tf->eip = elf.entry;  // main
kernel.asm:  proc->tf->esp = sp;
kernel.asm:    ip = idup(proc->cwd);
kernel.asm:    ip = idup(proc->cwd);
kernel.asm:      if(ncpu != proc->apicid){
kernel.asm:        cprintf("mpinit: ncpu=%d apicid=%d\n", ncpu, proc->apicid);
kernel.asm:      if(proc->flags & MPBOOT)
kernel.asm:      if(p->readopen == 0 || proc->killed){
kernel.asm:    if(proc->killed){
kernel.asm:  sz = proc->sz;
kernel.asm:    if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
kernel.asm:    if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
kernel.asm:  proc->sz = sz;
kernel.asm:  if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
kernel.asm:  np->sz = proc->sz;
kernel.asm:  *np->tf = *proc->tf;
kernel.asm:	np->uid = proc->uid;
kernel.asm:	np->gid = proc->gid;
kernel.asm:    if(proc->ofile[i])
kernel.asm:      np->ofile[i] = filedup(proc->ofile[i]);
kernel.asm:    if(proc->ofile[i])
kernel.asm:      np->ofile[i] = filedup(proc->ofile[i]);
kernel.asm:  np->cwd = idup(proc->cwd);
kernel.asm:  safestrcpy(np->name, proc->name, sizeof(proc->name));
kernel.asm:    if(proc->ofile[fd]){
kernel.asm:      fileclose(proc->ofile[fd]);
kernel.asm:      proc->ofile[fd] = 0;
kernel.asm:      fileclose(proc->ofile[fd]);
kernel.asm:      proc->ofile[fd] = 0;
kernel.asm:  iput(proc->cwd);
kernel.asm:  proc->cwd = 0;
kernel.asm:  wakeup1(proc->parent);
kernel.asm:  wakeup1(proc->parent);
kernel.asm:  proc->state = ZOMBIE;
kernel.asm:    if(!havekids || proc->killed){
kernel.asm:      swtch(&cpu->scheduler, proc->context);
kernel.asm:// and have changed proc->state.
kernel.asm:  if(proc->state == RUNNING)
kernel.asm:	proc->cpu_ticks_total += ticks - proc->cpu_ticks_in;
kernel.asm:  swtch(&proc->context, cpu->scheduler);
kernel.asm:  proc->state = RUNNABLE;
kernel.asm:  proc->chan = chan;
kernel.asm:  proc->state = SLEEPING;
kernel.asm:  proc->chan = 0;
kernel.asm:  if(addr >= proc->sz || addr+4 > proc->sz)
kernel.asm:  if(addr >= proc->sz)
kernel.asm:  ep = (char*)proc->sz;
kernel.asm:  if(addr >= proc->sz)
kernel.asm:  ep = (char*)proc->sz;
kernel.asm:  return fetchint(proc->tf->esp + 4 + 4*n, ip);
kernel.asm:  if((uint)i >= proc->sz || (uint)i+size > proc->sz)
kernel.asm:  num = proc->tf->eax;
kernel.asm:    proc->tf->eax = syscalls[num]();
kernel.asm:		cprintf("%s -> %d\n", syscallnames[num], proc->tf->eax);
kernel.asm:            proc->pid, proc->name, num);
kernel.asm:		cprintf("%s -> %d\n", syscallnames[num], proc->tf->eax);
kernel.asm:            proc->pid, proc->name, num);
kernel.asm:    proc->tf->eax = -1;
kernel.asm:  if(fd < 0 || fd >= NOFILE || (f=proc->ofile[fd]) == 0)
kernel.asm:    if(proc->ofile[fd] == 0){
kernel.asm:      proc->ofile[fd] = f;
kernel.asm:    if(proc->ofile[fd] == 0){
kernel.asm:      proc->ofile[fd] = f;
kernel.asm:  proc->ofile[fd] = 0;
kernel.asm:  iput(proc->cwd);
kernel.asm:  proc->cwd = ip;
kernel.asm:      proc->ofile[fd0] = 0;
kernel.asm:  return proc->pid;
kernel.asm:  addr = proc->sz;
kernel.asm:    if(proc->killed){
kernel.asm:    if(proc->killed){
kernel.asm:	return proc->uid;
kernel.asm:	return proc->gid;
kernel.asm:	return proc->parent->pid;
kernel.asm:    if(proc->killed)
kernel.asm:    proc->tf = tf;
kernel.asm:    if(proc->killed)
kernel.asm:            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
kernel.asm:            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
kernel.asm:            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
kernel.asm:    proc->killed = 1;
kernel.asm:  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
kernel.asm:  if(proc && proc->state == RUNNING &&
kernel.asm:  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
kernel.asm:  if(proc && proc->state == RUNNING &&
kernel.asm:  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
kernel.asm:    proc->tf = tf;
kernel.asm:    if(proc->killed)
kernel.asm:  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
kernel.asm:  cpu->ts.esp0 = (uint)proc->kstack + KSTACKSIZE;
mp.c:      if(ncpu != proc->apicid){
mp.c:        cprintf("mpinit: ncpu=%d apicid=%d\n", ncpu, proc->apicid);
mp.c:      if(proc->flags & MPBOOT)
p5-test.h:  // {proc-uid, proc-gid, file-uid, file-gid}
pipe.c:      if(p->readopen == 0 || proc->killed){
pipe.c:    if(proc->killed){
proc.c:  sz = proc->sz;
proc.c:    if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
proc.c:    if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
proc.c:  proc->sz = sz;
proc.c:  if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
proc.c:  np->sz = proc->sz;
proc.c:  *np->tf = *proc->tf;
proc.c:	np->uid = proc->uid;
proc.c:	np->gid = proc->gid;
proc.c:    if(proc->ofile[i])
proc.c:      np->ofile[i] = filedup(proc->ofile[i]);
proc.c:  np->cwd = idup(proc->cwd);
proc.c:  safestrcpy(np->name, proc->name, sizeof(proc->name));
proc.c:    if(proc->ofile[fd]){
proc.c:      fileclose(proc->ofile[fd]);
proc.c:      proc->ofile[fd] = 0;
proc.c:  iput(proc->cwd);
proc.c:  proc->cwd = 0;
proc.c:  wakeup1(proc->parent);
proc.c:  proc->state = ZOMBIE;
proc.c:    if(!havekids || proc->killed){
proc.c:      swtch(&cpu->scheduler, proc->context);
proc.c:// and have changed proc->state.
proc.c:  if(proc->state == RUNNING)
proc.c:	proc->cpu_ticks_total += ticks - proc->cpu_ticks_in;
proc.c:  swtch(&proc->context, cpu->scheduler);
proc.c:  proc->state = RUNNABLE;
proc.c:  proc->chan = chan;
proc.c:  proc->state = SLEEPING;
proc.c:  proc->chan = 0;
proc.h:// Segments in proc->gdt.
syscall.c:  if(addr >= proc->sz || addr+4 > proc->sz)
syscall.c:  if(addr >= proc->sz)
syscall.c:  ep = (char*)proc->sz;
syscall.c:  return fetchint(proc->tf->esp + 4 + 4*n, ip);
syscall.c:  if((uint)i >= proc->sz || (uint)i+size > proc->sz)
syscall.c:  num = proc->tf->eax;
syscall.c:    proc->tf->eax = syscalls[num]();
syscall.c:		cprintf("%s -> %d\n", syscallnames[num], proc->tf->eax);
syscall.c:            proc->pid, proc->name, num);
syscall.c:    proc->tf->eax = -1;
sysfile.c:  if(fd < 0 || fd >= NOFILE || (f=proc->ofile[fd]) == 0)
sysfile.c:    if(proc->ofile[fd] == 0){
sysfile.c:      proc->ofile[fd] = f;
sysfile.c:  proc->ofile[fd] = 0;
sysfile.c:  iput(proc->cwd);
sysfile.c:  proc->cwd = ip;
sysfile.c:      proc->ofile[fd0] = 0;
sysproc.c:  return proc->pid;
sysproc.c:  addr = proc->sz;
sysproc.c:    if(proc->killed){
sysproc.c:	return proc->uid;
sysproc.c:	return proc->gid;
sysproc.c:	return proc->parent->pid;
trap.c:    if(proc->killed)
trap.c:    proc->tf = tf;
trap.c:    if(proc->killed)
trap.c:            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
trap.c:    proc->killed = 1;
trap.c:  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
trap.c:  if(proc && proc->state == RUNNING &&
trap.c:  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
vm.c:  cpu->ts.esp0 = (uint)proc->kstack + KSTACKSIZE;
